import React, { useEffect, useState } from "react";
import LayoutInput from "../../../layout/layout_input";
import FormRow from "../../../components/formRow"; // ƒê·∫£m b·∫£o FormRow.tsx ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
import PATHS from "../../../hooks/path";
import DropdownMenuSearchable from "../../../components/dropdown_menu_searchable";
import { useApi } from "../../../hooks/useFetchData";

interface MaterialsEditProps {
  id?: string;
  onClose?: () => void;
  onSuccess?: () => void;
}

// S·ª¨A ƒê·ªîI: Interface n√†y ph·∫£i kh·ªõp v·ªõi JSON GET {id} B·∫†N V·ª™A CUNG C·∫§P
interface MaterialCost { 
  startDate: string;
  endDate: string;
  costType: number;
  amount: number;
}

interface Material {
  id: string;
  code: string;
  name: string;
  assigmentCodeId: string;
  unitOfMeasureId: string;
  costs: MaterialCost[]; // <-- API tr·∫£ v·ªÅ m·∫£ng n√†y
  // 'costAmmount' kh√¥ng c√≥ ·ªü ƒë√¢y
}

// Interface cho state n·ªôi b·ªô
interface CostRow {
  id: number; // Key cho React
  startDate: string;
  endDate: string;
  amount: string; // D√πng string cho input
}

const MaterialsEdit: React.FC<MaterialsEditProps> = ({ id, onClose, onSuccess }) => {
  // ====== API setup ======
  const materialPath = "/api/catalog/material";
  const assignmentCodePath = "/api/catalog/assignmentcode";
  const unitPath = "/api/catalog/unitofmeasure";

  // S·ª¨A ƒê·ªîI: useApi<Material> d√πng interface 'ph·ª©c t·∫°p' ·ªü tr√™n
  const { fetchById, putData } =
    useApi<Material>(materialPath);
  
  const { fetchData: fetchAssignmentCodes, data: assignmentCodes, loading: loadingAssignment } =
    useApi<{ id: string; code: string }>(assignmentCodePath);
  const { fetchData: fetchUnits, data: units, loading: loadingUnit } =
    useApi<{ id: string; name: string }>(unitPath);

  // ====== State ======
  const [currentMaterial, setCurrentMaterial] = useState<Material | null>(null);
  const [selectedAssignmentCode, setSelectedAssignmentCode] = useState<string>("");
  const [selectedUnit, setSelectedUnit] = useState<string>("");
  
  const [formData, setFormData] = useState({
    code: "",
    name: "",
  });

  // State cho danh s√°ch h√†ng ƒë∆°n gi√°
  const [costRows, setCostRows] = useState<CostRow[]>([
    { id: Date.now(), startDate: "", endDate: "", amount: "" }
  ]);

  // ====== Load material by ID ======
  useEffect(() => {
    const loadData = async () => {
      if (!id) return;
      const res = await fetchById(id);
      if (res) setCurrentMaterial(res as Material);
    };
    loadData();
  }, [id, fetchById]);

  // ====== Load dropdowns ======
  useEffect(() => {
    fetchAssignmentCodes();
    fetchUnits();
  }, [fetchAssignmentCodes, fetchUnits]);

  // ====== Sync data to form (S·ª¨A ƒê·ªîI QUAN TR·ªåNG) ======
  useEffect(() => {
    if (currentMaterial) {
      // 1. ƒê·ªìng b·ªô c√°c tr∆∞·ªùng ch√≠nh
      setFormData({
        code: currentMaterial.code,
        name: currentMaterial.name,
      });
      setSelectedAssignmentCode(currentMaterial.assigmentCodeId || "");
      setSelectedUnit(currentMaterial.unitOfMeasureId || "");

      // 2. S·ª¨A ƒê·ªîI: ƒê·ªìng b·ªô m·∫£ng 'costs' (t·ª´ API) v√†o 'costRows' (state)
      if (currentMaterial.costs && currentMaterial.costs.length > 0) {
        setCostRows(currentMaterial.costs.map((cost, index) => ({
          id: Date.now() + index, // T·∫°o key duy nh·∫•t
          startDate: cost.startDate,
          endDate: cost.endDate,
          amount: cost.amount.toString(), // Chuy·ªÉn s·ªë sang string cho input
        })));
      } else {
        // N·∫øu kh√¥ng c√≥ cost, tr·∫£ v·ªÅ 1 h√†ng r·ªóng
        setCostRows([{ id: Date.now(), startDate: "", endDate: "", amount: "" }]);
      }
    }
  }, [currentMaterial]); // Ph·ª• thu·ªôc v√†o currentMaterial

  const assignmentOptions = assignmentCodes?.map((a) => ({ value: a.id, label: a.code })) || [];
  const unitOptions = units?.map((u) => ({ value: u.id, label: u.name })) || [];

  // ====== PUT submit (H√†m n√†y ƒë√£ ƒë√∫ng) ======
  // H√†m n√†y g·ª≠i payload 'ph·ª©c t·∫°p' (v·ªõi m·∫£ng costs)
  const handleSubmit = async (data: Record<string, string>) => {
    if (!id) return alert("‚ùå Thi·∫øu ID ƒë·ªÉ c·∫≠p nh·∫≠t!");
    // ... (c√°c validation kh√°c) ...

    const payload = { 
      id,
      code: data["M√£ v·∫≠t t∆∞, t√†i s·∫£n"].trim(),
      name: data["T√™n v·∫≠t t∆∞, t√†i s·∫£n"].trim(),
      assigmentCodeId: selectedAssignmentCode,
      unitOfMeasureId: selectedUnit,
      costs: costRows.map(row => ({
        startDate: row.startDate || new Date().toISOString(),
        endDate: row.endDate || new Date().toISOString(),
        costType: 1, // B·∫°n c√≥ th·ªÉ mu·ªën thay ƒë·ªïi 'costType' n√†y
        amount: parseFloat(row.amount), 
      })),
    };

    console.log("üì§ PUT payload:", payload);

    await putData(payload, () => {
      console.log("‚úÖ C·∫≠p nh·∫≠t v·∫≠t t∆∞ th√†nh c√¥ng!");
      onSuccess?.();
      onClose?.();
    });
  };

  // ====== Fields (Ph·∫£i l√† custom1, custom2) ======
  const fields = [
    { type: "custom1" as const }, 
    { label: "M√£ v·∫≠t t∆∞, t√†i s·∫£n", type: "text" as const, placeholder: "Nh·∫≠p m√£ v·∫≠t t∆∞, t√†i s·∫£n, v√≠ d·ª•: TN01" },
    { label: "T√™n v·∫≠t t∆∞, t√†i s·∫£n", type: "text" as const, placeholder: "Nh·∫≠p t√™n v·∫≠t t∆∞, t√†i s·∫£n, v√≠ d·ª•: Thu·ªëc n·ªï" },
    { type: "custom2" as const }, 
  ];

  // ====== C√°c h√†m qu·∫£n l√Ω state 'costRows' (Gi·ªØ nguy√™n) ======
  const handleCostRowChange = (
    rowIndex: number,
    fieldName: keyof CostRow,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    value: any
  ) => {
    setCostRows(currentRows =>
      currentRows.map((row, index) => {
        if (index === rowIndex) {
          return { ...row, [fieldName]: value };
        }
        return row;
      })
    );
  };

  const handleAddCostRow = () => {
    setCostRows(currentRows => [
      ...currentRows,
      { id: Date.now(), startDate: "", endDate: "", amount: "" }
    ]);
  };

  const handleRemoveCostRow = (rowIndex: number) => {
    if (costRows.length <= 1) return;
    setCostRows(currentRows => currentRows.filter((_, index) => index !== rowIndex));
  };

  // T·∫°o 'rows' prop cho FormRow (Gi·ªØ nguy√™n)
  const formRowPropData = costRows.map((row, index) => [
    {
      label: "Ng√†y b·∫Øt ƒë·∫ßu",
      placeholder: "Ch·ªçn ng√†y",
      type: "date" as const,
      value: row.startDate ? new Date(row.startDate) : null,
      onChange: (date: Date | null) => 
        handleCostRowChange(index, 'startDate', date?.toISOString() || ""),
    },
    {
      label: "Ng√†y k·∫øt th√∫c",
      placeholder: "Ch·ªçn ng√†y",
      type: "date" as const,
      value: row.endDate ? new Date(row.endDate) : null,
      onChange: (date: Date | null) => 
        handleCostRowChange(index, 'endDate', date?.toISOString() || ""),
    },
    {
      label: "ƒê∆°n gi√° v·∫≠t t∆∞",
      placeholder: "Nh·∫≠p ƒë∆°n gi√°",
      type: "number" as const,
      value: row.amount,
      onChange: (value: string) => 
        handleCostRowChange(index, 'amount', value),
    },
  ]);

  return (
      <LayoutInput
        title01="Danh m·ª•c / V·∫≠t t∆∞, t√†i s·∫£n"
        title="Ch·ªânh s·ª≠a V·∫≠t t∆∞, t√†i s·∫£n"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.MATERIALS.LIST}
        onClose={onClose}
        initialData={{
          "M√£ v·∫≠t t∆∞, t√†i s·∫£n": formData.code,
          "T√™n v·∫≠t t∆∞, t√†i s·∫£n": formData.name,
        }}
        shouldSyncInitialData={true}
        formRowComponent={
          <FormRow
            title="ƒê∆°n gi√° v·∫≠t t∆∞"
            rows={formRowPropData}
            onAdd={handleAddCostRow}
            onRemove={handleRemoveCostRow}
          />
        }
      >
        {/* Dropdown M√£ giao kho√°n */}
        <div className="custom1" key={1}>
          <DropdownMenuSearchable
            label="M√£ giao kho√°n"
            options={assignmentOptions}
            value={selectedAssignmentCode}
            onChange={setSelectedAssignmentCode}
            placeholder="Ch·ªçn m√£ giao kho√°n..."
            isDisabled={loadingAssignment}
          />
        </div>

        {/* Dropdown ƒê∆°n v·ªã t√≠nh */}
        <div className="custom2" key={2}>
          <DropdownMenuSearchable
            label="ƒê∆°n v·ªã t√≠nh"
            options={unitOptions}
            value={selectedUnit}
            onChange={setSelectedUnit}
            placeholder="Ch·ªçn ƒë∆°n v·ªã t√≠nh..."
            isDisabled={loadingUnit}
          />
        </div>
      </LayoutInput>
  );
};

export default MaterialsEdit;