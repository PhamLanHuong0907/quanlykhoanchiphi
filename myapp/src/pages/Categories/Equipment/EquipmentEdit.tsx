import React, { useEffect, useState } from "react";
import LayoutInput from "../../../layout/layout_input";
import FormRow from "../../../components/formRow"; // ƒê·∫£m b·∫£o FormRow.tsx ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
import PATHS from "../../../hooks/path";
import DropdownMenuSearchable from "../../../components/dropdown_menu_searchable";
import { useApi } from "../../../hooks/useFetchData";

interface EquipmentEditProps {
  id?: string;
  onClose?: () => void;
  onSuccess?: () => void;
}

// Interface cho chi ph√≠ (t·ª´ API)
interface EquipmentCost {
  startDate: string;
  endDate: string;
  costType: number;
  amount: number;
}

// Interface cho Equipment (t·ª´ API GET {id})
interface Equipment {
  id: string;
  code: string;
  name: string;
  unitOfMeasureId: string;
  costs: EquipmentCost[]; // Gi·∫£ ƒë·ªãnh API GET {id} tr·∫£ v·ªÅ m·∫£ng n√†y
}

// Interface cho state qu·∫£n l√Ω h√†ng chi ph√≠
interface CostRow {
  id: number; // Key cho React
  startDate: string;
  endDate: string;
  amount: string; // D√πng string cho input
}

// Interface cho state dropdown
interface DropdownOption {
  value: string;
  label: string;
}

const EquipmentEdit: React.FC<EquipmentEditProps> = ({ id, onClose, onSuccess }) => {
  // ====== API setup ======
  const equipmentPath = "/api/catalog/equipment";
  const unitPath = "/api/catalog/unitofmeasure";

  // API cho Equipment (GET by Id, PUT)
  const { fetchById, putData, loading: loadingEquipment, error: errorEquipment } =
    useApi<Equipment>(equipmentPath);
  
  // API cho ƒê∆°n v·ªã t√≠nh
  const { fetchData: fetchUnits, data: units, loading: loadingUnit, error: errorUnit } =
    useApi<{ id: string; name: string }>(unitPath);

  // ====== State ======
  const [currentEquipment, setCurrentEquipment] = useState<Equipment | null>(null);
  const [selectedUnit, setSelectedUnit] = useState<string>("");
  
  const [formData, setFormData] = useState({
    code: "",
    name: "",
  });

  // State cho danh s√°ch h√†ng chi ph√≠
  const [costRows, setCostRows] = useState<CostRow[]>([
    { id: Date.now(), startDate: "", endDate: "", amount: "" }
  ]);

  // ====== Load equipment by ID ======
  useEffect(() => {
    const loadData = async () => {
      if (!id) return;
      const res = await fetchById(id);
      if (res) setCurrentEquipment(res as Equipment);
    };
    loadData();
  }, [id, fetchById]);

  // ====== Load dropdowns ======
  useEffect(() => {
    fetchUnits();
  }, [fetchUnits]);

  // ====== Sync data to form (ƒê·ªìng b·ªô d·ªØ li·ªáu load ƒë∆∞·ª£c v√†o state) ======
  useEffect(() => {
    if (currentEquipment) {
      // 1. ƒê·ªìng b·ªô c√°c tr∆∞·ªùng ch√≠nh
      setFormData({
        code: currentEquipment.code,
        name: currentEquipment.name,
      });
      setSelectedUnit(currentEquipment.unitOfMeasureId || "");

      // 2. ƒê·ªìng b·ªô danh s√°ch 'costs' v√†o 'costRows'
      if (currentEquipment.costs && currentEquipment.costs.length > 0) {
        setCostRows(currentEquipment.costs.map((cost, index) => ({
          id: Date.now() + index,
          startDate: cost.startDate,
          endDate: cost.endDate,
          amount: cost.amount.toString(),
        })));
      } else {
        setCostRows([{ id: Date.now(), startDate: "", endDate: "", amount: "" }]);
      }
    }
  }, [currentEquipment]); // Ph·ª• thu·ªôc v√†o currentEquipment

  // Map options cho dropdown ƒêVT
  const unitOptions: DropdownOption[] =
    units?.map((u) => ({ value: u.id, label: u.name })) || [];

  // ====== PUT submit ======
  const handleSubmit = async (data: Record<string, string>) => {
    if (!id) return alert("‚ùå Thi·∫øu ID ƒë·ªÉ c·∫≠p nh·∫≠t!");

    const code = data["M√£ thi·∫øt b·ªã"]?.trim();
    const name = data["T√™n thi·∫øt b·ªã"]?.trim();
    const unitOfMeasureId = selectedUnit;

    if (!code) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p M√£ thi·∫øt b·ªã!");
    if (!name) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p T√™n thi·∫øt b·ªã!");
    if (!unitOfMeasureId) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒê∆°n v·ªã t√≠nh!");

    // T·∫°o payload
    const payload = { 
      id,
      code,
      name,
      unitOfMeasureId,
      costs: costRows.map(row => ({
        startDate: row.startDate || new Date().toISOString(),
        endDate: row.endDate || new Date().toISOString(),
        costType: 1, // Gi·ªØ nguy√™n costType = 1
        amount: parseFloat(row.amount || "0"),
      })),
    };

    console.log("üì§ PUT payload:", payload);

    await putData( payload, () => {
      console.log("‚úÖ C·∫≠p nh·∫≠t thi·∫øt b·ªã th√†nh c√¥ng!");
      onSuccess?.();
      onClose?.();
    });
  };

  // ====== Fields (ƒê·ªãnh nghƒ©a cho LayoutInput) ======
  const fields = [
    { label: "M√£ thi·∫øt b·ªã", type: "text" as const, placeholder: "Nh·∫≠p m√£ thi·∫øt b·ªã, v√≠ d·ª•: BDLT5054" },
    { label: "T√™n thi·∫øt b·ªã", type: "text" as const, placeholder: "Nh·∫≠p t√™n thi·∫øt b·ªã, v√≠ d·ª•: B∆°m ƒëi·ªán LT 50/54" },
    { type: "custom1" as const }, // placeholder cho dropdown ƒê∆°n v·ªã t√≠nh
  ];

  // ====== Logic qu·∫£n l√Ω FormRow (Costs) ======
  const handleCostRowChange = (
    rowIndex: number,
    fieldName: keyof CostRow,
    value: any
  ) => {
    setCostRows(currentRows =>
      currentRows.map((row, index) => {
        if (index === rowIndex) {
          return { ...row, [fieldName]: value };
        }
        return row;
      })
    );
  };

  const handleAddCostRow = () => {
    setCostRows(currentRows => [
      ...currentRows,
      { id: Date.now(), startDate: "", endDate: "", amount: "" }
    ]);
  };

  const handleRemoveCostRow = (rowIndex: number) => {
    if (costRows.length <= 1) return;
    setCostRows(currentRows => currentRows.filter((_, index) => index !== rowIndex));
  };

  // T·∫°o 'rows' prop cho FormRow t·ª´ state 'costRows'
  const formRowPropData = costRows.map((row, index) => [
    {
      label: "Ng√†y b·∫Øt ƒë·∫ßu",
      placeholder: "dd/mm/yy",
      type: "date" as const,
      value: row.startDate ? new Date(row.startDate) : null,
      onChange: (date: Date | null) => 
        handleCostRowChange(index, 'startDate', date?.toISOString() || ""),
    },
    {
      label: "Ng√†y k·∫øt th√∫c",
      placeholder: "dd/mm/yy",
      type: "date" as const,
      value: row.endDate ? new Date(row.endDate) : null,
      onChange: (date: Date | null) => 
        handleCostRowChange(index, 'endDate', date?.toISOString() || ""),
    },
    {
      label: "ƒê∆°n gi√°",
      placeholder: "Nh·∫≠p ƒë∆°n gi√° ƒëi·ªán nƒÉng",
      type: "number" as const,
      value: row.amount,
      onChange: (value: string) => 
        handleCostRowChange(index, 'amount', value),
    },
  ]);

  return (
      <LayoutInput
        title01="Danh m·ª•c / M√£ thi·∫øt b·ªã"
        title="Ch·ªânh s·ª≠a M√£ thi·∫øt b·ªã"
        fields={fields}
        onSubmit={handleSubmit}
        formRowComponent={
          <FormRow
            title="ƒê∆°n gi√° ƒëi·ªán nƒÉng"
            title1="ƒëi·ªán nƒÉng"
            rows={formRowPropData}
            onAdd={handleAddCostRow}
            onRemove={handleRemoveCostRow}
          />
        }
        closePath={PATHS.EQUIPMENT.LIST}
        onClose={onClose}
        initialData={{
          "M√£ thi·∫øt b·ªã": formData.code,
          "T√™n thi·∫øt b·ªã": formData.name,
        }}
        shouldSyncInitialData={true} // B·∫≠t c·ªù ƒë·ªìng b·ªô khi data load v·ªÅ
      >
        {/* Custom slot "custom1" cho ƒê∆°n v·ªã t√≠nh */}
        <div className="custom1" key={1}>
          <DropdownMenuSearchable
            label="ƒê∆°n v·ªã t√≠nh"
            options={unitOptions}
            value={selectedUnit}
            onChange={setSelectedUnit}
            placeholder="Ch·ªçn ƒë∆°n v·ªã t√≠nh..."
            isDisabled={loadingUnit}
          />
        </div>
      </LayoutInput>
      
  );
};

export default EquipmentEdit;