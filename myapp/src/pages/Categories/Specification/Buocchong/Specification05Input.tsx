import React from "react"; // 1. Th√™m React
import LayoutInput from "../../../../layout/layout_input";
import PATHS from "../../../../hooks/path";
import { useApi } from "../../../../hooks/useFetchData"; // 2. Import useApi

// 3. C·∫≠p nh·∫≠t props
interface Specification05InputProps {
  onClose?: () => void;
  onSuccess?: () => void;
}

export default function Specification05Input({ onClose, onSuccess }: Specification05InputProps) {
  // 4. Khai b√°o API
  const basePath = `api/product/supportstep`; // (L·∫•y t·ª´ Specification05.tsx)
  // (M·∫´u JSON post suy ra t·ª´ c√°c file Specification 02, 03, 04)
  const { postData, loading: saving, error: saveError } = useApi(basePath);

  // 5. C·∫≠p nh·∫≠t handleSubmit
  const handleSubmit = async (data: Record<string, string>) => {
    const value = data["B∆∞·ªõc ch·ªëng"]?.trim();

    // Validation
    if (!value) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p B∆∞·ªõc ch·ªëng!");

    // Payload (d·ª±a theo m·∫´u JSON { "value": "string" })
    const payload = {
      value,
    };

    console.log("üì§ POST payload:", payload);

    // G·ª≠i d·ªØ li·ªáu
    await postData(payload, () => {
      console.log("‚úÖ T·∫°o B∆∞·ªõc ch·ªëng th√†nh c√¥ng!");
      onSuccess?.();
      onClose?.();
    });
  };

  // Fields (gi·ªØ nguy√™n)
  const fields = [
    {
      label: "B∆∞·ªõc ch·ªëng",
      type: "text" as const,
      placeholder: "Nh·∫≠p b∆∞·ªõc ch·ªëng"
    },
  ];

  return (
    // 6. B·ªçc b·∫±ng Fragment
    <>
      <LayoutInput
        title01="Danh m·ª•c / Th√¥ng s·ªë / B∆∞·ªõc ch·ªëng"
        title="T·∫°o m·ªõi B∆∞·ªõc ch·ªëng"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.SPECIFICATION_05.LIST}
        onClose={onClose}
        // 7. Th√™m initialData
        initialData={{
          "B∆∞·ªõc ch·ªëng": "",
        }}
      />
      {/* 8. Hi·ªÉn th·ªã tr·∫°ng th√°i loading/error */}
      <div style={{ padding: '0 20px', marginTop: '-10px' }}>
        {saving && (
          <p className="text-blue-500 mt-3">ƒêang x·ª≠ l√Ω...</p>
        )}
        {saveError && (
          <p className="text-red-500 mt-3">L·ªói: {saveError.toString()}</p>
        )}
      </div>
    </>
  );
}