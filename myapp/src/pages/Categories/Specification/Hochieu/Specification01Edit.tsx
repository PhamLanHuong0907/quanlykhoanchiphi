import React, { useEffect, useState } from "react"; // 1. Th√™m React, useEffect, useState
import PATHS from "../../../../hooks/path";
import LayoutInput from "../../../../layout/layout_input";
import { useApi } from "../../../../hooks/useFetchData"; // 2. Th√™m useApi

// 3. C·∫≠p nh·∫≠t props
interface Specification01EditProps {
  id?: string;
  onClose?: () => void;
  onSuccess?: () => void;
}

// 4. Interface cho d·ªØ li·ªáu (d·ª±a tr√™n m·∫´u PUT JSON)
// Gi·∫£ ƒë·ªãnh API GET {id} tr·∫£ v·ªÅ c·∫•u tr√∫c t∆∞∆°ng t·ª±
interface Passport {
  id: string;
  name: string;
  sd: string;
  sc: number;
}

export default function Specification01Edit({ id, onClose, onSuccess }: Specification01EditProps) {
  // 5. Khai b√°o API
  const basePath = `/api/product/passport`;
  const { fetchById, putData, loading: loadingData, error: dataError }
    = useApi<Passport>(basePath);

  // 6. State
  const [currentData, setCurrentData] = useState<Passport | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    sd: "",
    sc: "", // D√πng string cho input
  });

  // 7. Load data by ID
  useEffect(() => {
    const loadData = async () => {
      if (!id) return;
      const res = await fetchById(id);
      if (res) setCurrentData(res as Passport);
    };
    loadData();
  }, [id, fetchById]);

  // 8. Sync data to form state
  useEffect(() => {
    if (currentData) {
      setFormData({
        name: currentData.name,
        sd: currentData.sd,
        sc: currentData.sc.toString(), // Chuy·ªÉn s·ªë sang string
      });
    }
  }, [currentData]);

  // 9. C·∫≠p nh·∫≠t handleSubmit (logic PUT)
  const handleSubmit = async (data: Record<string, string>) => {
    if (!id) return alert("‚ùå Thi·∫øu ID ƒë·ªÉ c·∫≠p nh·∫≠t!");

    const name = data["H·ªô chi·∫øu"]?.trim();
    const sd = data["Sƒë"]?.trim();
    const scString = data["Sc"]?.trim();

    // Validation
    if (!name) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p H·ªô chi·∫øu!");
    if (!sd) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Sƒë!");
    if (!scString) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Sc!");
    
    const sc = parseFloat(scString);
    if (isNaN(sc)) {
      return alert("‚ö†Ô∏è Sc ph·∫£i l√† m·ªôt con s·ªë!");
    }

    // Payload
    const payload = {
      id,
      name,
      sd,
      sc,
    };

    console.log("üì§ PUT payload:", payload);

    // G·ª≠i d·ªØ li·ªáu
    await putData(payload, () => {
      console.log("‚úÖ C·∫≠p nh·∫≠t H·ªô chi·∫øu th√†nh c√¥ng!");
      onSuccess?.();
      onClose?.();
    });
  };

  // 10. C·∫≠p nh·∫≠t fields (Sc n√™n l√† type 'number')
  const fields = [
    { label: "H·ªô chi·∫øu", type: "text" as const, placeholder: "Nh·∫≠p h·ªô chi·∫øu" },
    { label: "Sƒë", type: "text" as const, placeholder: "Nh·∫≠p Sƒë: 2<=Sƒë<=3", enableCompare: true },
    { label: "Sc", type: "text" as const, placeholder: "Nh·∫≠p Sc" }, // S·ª≠a type
  ];

  return (
    // 11. B·ªçc b·∫±ng Fragment
    <>
      <LayoutInput
        title01="Danh m·ª•c / Th√¥ng s·ªë / H·ªô chi·∫øu Sƒë, Sc"
        title="Ch·ªânh s·ª≠a H·ªô chi·∫øu, Sƒë, Sc"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.SPECIFICATION_01.LIST}
        onClose={onClose}
        // 12. Th√™m initialData v√† shouldSync
        initialData={{
          "H·ªô chi·∫øu": formData.name,
          "Sƒë": formData.sd,
          "Sc": formData.sc,
        }}
        shouldSyncInitialData={true}
      />
      {/* 13. Th√™m loading/error state */}
      <div style={{ padding: '0 20px', marginTop: '-10px' }}>
        {(loadingData) && (
          <p className="text-blue-500 mt-3">ƒêang t·∫£i d·ªØ li·ªáu...</p>
        )}
        {(dataError) && (
          <p className="text-red-500 mt-3">L·ªói: {dataError.toString()}</p>
        )}
      </div>
    </>
  );
}