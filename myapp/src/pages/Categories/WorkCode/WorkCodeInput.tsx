import React, { useEffect, useState } from "react";
import LayoutInput from "../../../layout/layout_input";
import PATHS from "../../../hooks/path";
import { useApi } from "../../../hooks/useFetchData";
import DropdownMenuSearchable from "../../../components/dropdown_menu_searchable";

interface WorkCodeInputProps {
  onClose?: () => void;
  onSuccess?: () => void;
}

const WorkCodeInput: React.FC<WorkCodeInputProps> = ({ onClose, onSuccess }) => {
  // ====== API setup ======
  const unitPath = `/api/catalog/unitofmeasure?pageIndex=1&pageSize=1000`;
  const assignmentPath = `/api/catalog/assignmentcode`;

  // Fetch danh s√°ch ƒë∆°n v·ªã t√≠nh
  const {
    fetchData: fetchUnits,
    data: units,
    loading: loadingUnits,
    error: errorUnits,
  } = useApi<{ id: string; name: string }>(unitPath);

  // Post d·ªØ li·ªáu m√£ giao kho√°n
  const { postData, loading: saving, error: saveError } = useApi(assignmentPath);

  const [selectedUnitId, setSelectedUnitId] = useState<string>("");
  const [formData, setFormData] = useState({
    code: "",
    name: "",
  });

  // ====== Load danh s√°ch ƒë∆°n v·ªã t√≠nh ======
  useEffect(() => {
    fetchUnits();
  }, [fetchUnits]);

  const unitOptions =
    units?.map((u) => ({
      value: u.id,
      label: u.name,
    })) || [];

  // ====== Submit form ======
  const handleSubmit = async (data: Record<string, string>) => {
    const code = data["M√£ giao kho√°n"]?.trim();
    const name = data["T√™n m√£ giao kho√°n"]?.trim();
    const unitOfMeasureId = selectedUnitId;

    if (!code) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ giao kho√°n!");
    if (!name) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n m√£ giao kho√°n!");
    if (!unitOfMeasureId)
      return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë∆°n v·ªã t√≠nh!");

    console.log("üì§ POST:", { code, name, unitOfMeasureId });

    await postData({ code, name, unitOfMeasureId }, () => {
      console.log("‚úÖ T·∫°o m√£ giao kho√°n th√†nh c√¥ng!");
      onSuccess?.(); // refresh b·∫£ng ngo√†i
      onClose?.();   // ƒë√≥ng form
    });
  };

  // ====== Tr∆∞·ªùng nh·∫≠p ======
  const fields = [
    {
      label: "M√£ giao kho√°n",
      type: "text" as const,
      placeholder: "Nh·∫≠p m√£ giao kho√°n, v√≠ d·ª•: VLN ",
    },
    {
      label: "T√™n m√£ giao kho√°n",
      type: "text" as const,
      placeholder: "Nh·∫≠p t√™n m√£ giao kho√°n, v√≠ d·ª•: V·∫≠t li·ªáu n·ªï",
    },
    { type: "custom" as const }, // n∆°i ch√®n dropdown
  ];

  return (
    // S·ª¨A ƒê·ªîI: B·ªçc b·∫±ng Fragment
      <LayoutInput
        title01="Danh m·ª•c / M√£ giao kho√°n"
        title="T·∫°o m·ªõi M√£ giao kho√°n"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.WORK_CODE.LIST}
        onClose={onClose}
        initialData={{
          "M√£ giao kho√°n": formData.code,
          "T√™n m√£ giao kho√°n": formData.name,
        }}
      >
        {/* ‚úÖ Dropdown ƒê∆°n v·ªã t√≠nh n·∫±m ·ªü cu·ªëi form */}
        {/* S·ª¨A ƒê·ªîI: ƒê·ªïi className="mt-3" th√†nh className="custom" ƒë·ªÉ kh·ªõp v·ªõi type */}
        <div className="custom" key={1}> 
          {/* B·∫°n c√≥ th·ªÉ l·ªìng th√™m 1 div "mt-3" b√™n trong n·∫øu v·∫´n mu·ªën gi·ªØ margin */}
          <DropdownMenuSearchable
            label="ƒê∆°n v·ªã t√≠nh"
            options={unitOptions}
            value={selectedUnitId}
            onChange={(value) => setSelectedUnitId(value)}
            placeholder="Ch·ªçn ƒë∆°n v·ªã t√≠nh..."
            isDisabled={loadingUnits}
          />
        </div>

        {/* Tr·∫°ng th√°i t·∫£i v√† l·ªói (ƒê√É X√ìA KH·ªéI ƒê√ÇY) */}
      </LayoutInput>
  );
};

export default WorkCodeInput;