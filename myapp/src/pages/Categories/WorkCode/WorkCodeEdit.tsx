import React, { useEffect, useState } from "react";
import LayoutInput from "../../../layout/layout_input";
import PATHS from "../../../hooks/path";
import DropdownMenuSearchable from "../../../components/dropdown_menu_searchable";
import { useApi } from "../../../hooks/useFetchData";

interface WorkCodeEditProps {
  id?: string;
  onClose?: () => void;
  onSuccess?: () => void;
}

interface WorkCode {
  id: string;
  code: string;
  name: string;
  unitOfMeasureId: string;
}

const WorkCodeEdit: React.FC<WorkCodeEditProps> = ({
  id,
  onClose,
  onSuccess,
}) => {
  // ====== API setup ======
  const workCodePath = `/api/catalog/assignmentcode`;
  const unitPath = `/api/catalog/unitofmeasure`;

  // useApi cho WorkCode (GET theo id + PUT)
  const {
    fetchById,
    putData,
    loading: loadingWorkCode,
    error: errorWorkCode,
  } = useApi<WorkCode>(workCodePath);

  // useApi cho danh s√°ch ƒë∆°n v·ªã t√≠nh
  const {
    fetchData: fetchUnits,
    data: units,
    loading: loadingUnits,
    error: errorUnits,
  } = useApi<{ id: string; name: string }>(unitPath);

  // ====== State ======
  const [currentWorkCode, setCurrentWorkCode] = useState<WorkCode | null>(null);
  const [selectedUnitId, setSelectedUnitId] = useState<string>("");
  const [formData, setFormData] = useState({
    code: "",
    name: "",
  });

  // ====== Fetch d·ªØ li·ªáu WorkCode theo ID ======
  useEffect(() => {
    const loadData = async () => {
      if (!id) return;
      const res = await fetchById(id); // GET: /api/catalog/assignmentcode/{id}
      if (res) setCurrentWorkCode(res as WorkCode);
    };
    loadData();
  }, [id, fetchById]);

  // ====== G√°n d·ªØ li·ªáu v√†o form ======
  useEffect(() => {
    if (currentWorkCode) {
      setFormData({
        code: currentWorkCode.code,
        name: currentWorkCode.name,
      });
      setSelectedUnitId(currentWorkCode.unitOfMeasureId || "");
    }
  }, [currentWorkCode]);

  // ====== Load danh s√°ch ƒë∆°n v·ªã t√≠nh ======
  useEffect(() => {
    fetchUnits();
  }, [fetchUnits]);

  const unitOptions =
    units?.map((u) => ({
      value: u.id,
      label: u.name,
    })) || [];

  // ====== PUT c·∫≠p nh·∫≠t d·ªØ li·ªáu ======
  const handleSubmit = async (data: Record<string, string>) => {
    const code = data["M√£ giao kho√°n"]?.trim();
    const name = data["T√™n m√£ giao kho√°n"]?.trim();
    const unitOfMeasureId = selectedUnitId;

    if (!id) return alert("‚ùå Thi·∫øu ID m√£ giao kho√°n ƒë·ªÉ c·∫≠p nh·∫≠t!");
    if (!unitOfMeasureId) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒë∆°n v·ªã t√≠nh!");
    if (!code) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p m√£ giao kho√°n!");
    if (!name) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p t√™n m√£ giao kho√°n!");

    const payload = { id, code, name, unitOfMeasureId };
    console.log("üì§ PUT:", payload);

    await putData(
      payload,
      () => {
        console.log("‚úÖ C·∫≠p nh·∫≠t m√£ giao kho√°n th√†nh c√¥ng!");
        onSuccess?.(); // refresh b·∫£ng ngo√†i
        onClose?.();   // ƒë√≥ng popup
      },
    );
  };

  // ====== Fields ======
  const fields = [
    // custom slot cho dropdown
    {
      label: "M√£ giao kho√°n",
      type: "text" as const,
      placeholder: "Nh·∫≠p m√£ giao kho√°n",
    },
    {
      label: "T√™n m√£ giao kho√°n",
      type: "text" as const,
      placeholder: "Nh·∫≠p t√™n m√£ giao kho√°n",
    },
    { type: "custom" as const }, // ƒê·∫∑t slot custom ·ªü cu·ªëi
  ];

  return (
    // S·ª¨A ƒê·ªîI: B·ªçc b·∫±ng Fragment
      <LayoutInput
        title01="Danh m·ª•c / M√£ giao kho√°n"
        title="Ch·ªânh s·ª≠a M√£ giao kho√°n"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.WORK_CODE.LIST}
        onClose={onClose}
        initialData={{
          "M√£ giao kho√°n": formData.code,
          "T√™n m√£ giao kho√°n": formData.name,
        }}
        shouldSyncInitialData={true} // ƒë·ªìng b·ªô d·ªØ li·ªáu sau khi fetch
      >
        {/* Dropdown ƒê∆°n v·ªã t√≠nh */}
        {/* S·ª¨A ƒê·ªîI: Th√™m className="custom" ƒë·ªÉ kh·ªõp v·ªõi type */}
        <div className="custom" key={1}>
          <DropdownMenuSearchable
            label="ƒê∆°n v·ªã t√≠nh"
            options={unitOptions}
            value={selectedUnitId}
            onChange={(value) => setSelectedUnitId(value)}
            placeholder="Ch·ªçn ƒë∆°n v·ªã t√≠nh..."
            isDisabled={loadingUnits}
          />
        </div>

        {/* Tr·∫°ng th√°i t·∫£i & l·ªói (ƒê√É X√ìA KH·ªéI ƒê√ÇY) */}
      </LayoutInput>
  );
};

export default WorkCodeEdit;