import PATHS from "../../../hooks/path";
import LayoutInput from "../../../layout/layout_input";
import { useApi } from "../../../hooks/useFetchData"; // 2. Import useApi
import DropdownMenuSearchable from "../../../components/dropdown_menu_searchable"; // 2. Import Dropdown
import { useState, useEffect } from "react";
// 3. C·∫≠p nh·∫≠t props
interface AdjustmentFactors02InputProps {
  onClose?: () => void;
  onSuccess?: () => void;
}

// Interface cho Dropdown
interface DropdownOption {
  value: string;
  label: string;
}

// Interface cho API GET
interface ProcessGroup {
  id: string;
  name: string; // Gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ 'name' (d·ª±a tr√™n file List)
}
interface AdjustmentFactor {
  id: string;
  code: string; // Gi·∫£ ƒë·ªãnh API tr·∫£ v·ªÅ 'code' (d·ª±a tr√™n file List)
}


export default function AdjustmentFactors02Input({ onClose, onSuccess }: AdjustmentFactors02InputProps) {
  // 4. Khai b√°o API
  const postPath = "/api/adjustment/adjustmentfactordescription";
  const processGroupPath = "/api/process/processgroup";
  const adjustmentFactorPath = "/api/adjustment/adjustmentfactor";

  // API POST
  const { postData, loading: saving, error: saveError } = useApi(postPath);

  // API GET Dropdowns
  const { fetchData: fetchProcessGroups, data: processGroups, loading: loadingProcessGroup, error: errorProcessGroup } =
    useApi<ProcessGroup>(processGroupPath);
  const { fetchData: fetchAdjustmentFactors, data: adjustmentFactors, loading: loadingFactor, error: errorFactor } =
    useApi<AdjustmentFactor>(adjustmentFactorPath);

  // 5. State cho dropdowns
  const [selectedProcessGroup, setSelectedProcessGroup] = useState<string>("");
  const [selectedAdjustmentFactor, setSelectedAdjustmentFactor] = useState<string>("");

  // 6. Load dropdown data
  useEffect(() => {
    fetchProcessGroups();
    fetchAdjustmentFactors();
  }, [fetchProcessGroups, fetchAdjustmentFactors]);

  // 7. Map options
  const processGroupOptions: DropdownOption[] =
    processGroups?.map((g) => ({ value: g.id, label: g.name })) || [];
  const adjustmentFactorOptions: DropdownOption[] =
    adjustmentFactors?.map((f) => ({ value: f.id, label: f.code })) || [];


  // 8. C·∫≠p nh·∫≠t handleSubmit
  const handleSubmit = async (data: Record<string, string>) => {
    // L·∫•y gi√° tr·ªã t·ª´ text fields
    const description = data["Di·ªÖn gi·∫£i"]?.trim();
    const maintenanceValueStr = data["Tr·ªã s·ªë ƒëi·ªÅu ch·ªânh SCTX"]?.trim();
    const electricityValueStr = data["Tr·ªã s·ªë ƒëi·ªÅu ch·ªânh ƒëi·ªán nƒÉng"]?.trim();

    // Validation
    if (!selectedProcessGroup) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn Nh√≥m c√¥ng ƒëo·∫°n!");
    if (!selectedAdjustmentFactor) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn M√£ h·ªá s·ªë ƒëi·ªÅu ch·ªânh!");
    if (!description) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Di·ªÖn gi·∫£i!");
    if (!maintenanceValueStr) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Tr·ªã s·ªë SCTX!");
    if (!electricityValueStr) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p Tr·ªã s·ªë ƒëi·ªán nƒÉng!");

    // Chuy·ªÉn ƒë·ªïi sang s·ªë
    const maintenanceAdjustmentValue = parseFloat(maintenanceValueStr);
    const electricityAdjustmentValue = parseFloat(electricityValueStr);

    if (isNaN(maintenanceAdjustmentValue)) return alert("‚ö†Ô∏è Tr·ªã s·ªë SCTX ph·∫£i l√† m·ªôt con s·ªë!");
    if (isNaN(electricityAdjustmentValue)) return alert("‚ö†Ô∏è Tr·ªã s·ªë ƒëi·ªán nƒÉng ph·∫£i l√† m·ªôt con s·ªë!");

    // T·∫°o payload
    const payload = {
      description,
      adjustmentFactorId: selectedAdjustmentFactor,
      processGroupId: selectedProcessGroup,
      maintenanceAdjustmentValue,
      electricityAdjustmentValue,
    };
    
    console.log("üì§ POST payload:", payload);

    // G·ª≠i d·ªØ li·ªáu
    await postData(payload, () => {
      console.log("‚úÖ T·∫°o di·ªÖn gi·∫£i th√†nh c√¥ng!");
      onSuccess?.();
      onClose?.();
    });
  };

  // 9. C·∫≠p nh·∫≠t fields
  const fields = [
    { type: "custom1" as const }, // Placeholder cho Nh√≥m c√¥ng ƒëo·∫°n
    { type: "custom2" as const }, // Placeholder cho M√£ h·ªá s·ªë
    { label: "Di·ªÖn gi·∫£i", type: "text" as const, placeholder: "Nh·∫≠p th√¥ng s·ªë di·ªÖn gi·∫£i" },
    // S·ª≠a: D√πng type "number"
    { label: "Tr·ªã s·ªë ƒëi·ªÅu ch·ªânh SCTX", type: "text" as const, placeholder: "Nh·∫≠p tr·ªã s·ªë ƒëi·ªÅu ch·ªânh SCTX" },
    { label: "Tr·ªã s·ªë ƒëi·ªÅu ch·ªânh ƒëi·ªán nƒÉng", type: "text" as const, placeholder: "Nh·∫≠p tr·ªã s·ªë ƒëi·ªÅu ch·ªânh ƒëi·ªán nƒÉng" },
  ];

  const isLoading = loadingProcessGroup || loadingFactor || saving;
  const anyError = errorProcessGroup || errorFactor || saveError;

  return (
    // 10. B·ªçc b·∫±ng Fragment
    <>
      <LayoutInput
        title01="Danh m·ª•c / H·ªá s·ªë ƒëi·ªÅu ch·ªânh / Di·ªÖn gi·∫£i"
        title="T·∫°o m·ªõi Di·ªÖn gi·∫£i H·ªá s·ªë ƒëi·ªÅu ch·ªânh"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.ADJUSTMENT_FACTORS_02.LIST}
        onClose={onClose}
        initialData={{
          "Di·ªÖn gi·∫£i": "",
          "Tr·ªã s·ªë ƒëi·ªÅu ch·ªânh SCTX": "",
          "Tr·ªã s·ªë ƒëi·ªÅu ch·ªânh ƒëi·ªán nƒÉng": "",
        }}
      >
        {/* 11. Render Dropdowns */}
        <div className="custom1" key={1}>
          <DropdownMenuSearchable
            label="Nh√≥m c√¥ng ƒëo·∫°n"
            options={processGroupOptions}
            value={selectedProcessGroup}
            onChange={setSelectedProcessGroup}
            placeholder="Ch·ªçn nh√≥m c√¥ng ƒëo·∫°n..."
            isDisabled={loadingProcessGroup}
          />
        </div>
        <div className="custom2" key={2}>
          <DropdownMenuSearchable
            label="M√£ h·ªá s·ªë ƒëi·ªÅu ch·ªânh"
            options={adjustmentFactorOptions}
            value={selectedAdjustmentFactor}
            onChange={setSelectedAdjustmentFactor}
            placeholder="Ch·ªçn m√£ h·ªá s·ªë..."
            isDisabled={loadingFactor}
          />
        </div>
      </LayoutInput>
      
      {/* 12. Hi·ªÉn th·ªã tr·∫°ng th√°i loading/error */}
      <div style={{ padding: '0 20px', marginTop: '-10px' }}>
        {isLoading && (
          <p className="text-blue-500 mt-3">ƒêang x·ª≠ l√Ω...</p>
        )}
        {anyError && (
          <p className="text-red-500 mt-3">L·ªói: {anyError.toString()}</p>
        )}
      </div>
    </>
  );
}