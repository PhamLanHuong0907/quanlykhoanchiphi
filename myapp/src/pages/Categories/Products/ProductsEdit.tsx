import React, { useEffect, useState } from "react";
import LayoutInput from "../../../layout/layout_input";
import PATHS from "../../../hooks/path";
import DropdownMenuSearchable from "../../../components/dropdown_menu_searchable";
import { useApi } from "../../../hooks/useFetchData";

// 1. ƒê·ªãnh nghƒ©a Props
interface ProductsEditProps {
  id?: string;
  onClose?: () => void;
  onSuccess?: () => void;
}

// 2. Interface cho d·ªØ li·ªáu Product (GET {id})
// (Gi·∫£ ƒë·ªãnh API GET {id} tr·∫£ v·ªÅ c√°c ID kh√≥a ngo·∫°i)
interface Product {
  id: string;
  code: string;
  name: string;
  processGroupId: string;
  hardnessId: string;
  stoneClampRatioId: string;
  insertItemId: string;
}

// Interface cho c√°c t√πy ch·ªçn dropdown (Utility)
interface DropdownOption {
  value: string;
  label: string;
}

// Interfaces cho d·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ API dropdown
interface ProcessGroup { id: string; code: string; }
interface ProductProperty { id: string; value: string; }

const ProductsEdit: React.FC<ProductsEditProps> = ({ id, onClose, onSuccess }) => {
  // 3. ====== API setup ======
  const productPath = "/api/product/product";
  const processGroupPath = "/api/process/processgroup";
  const hardnessPath = "/api/product/hardness";
  const stoneClampRatioPath = "/api/product/stoneclampratio";
  const insertItemPath = "/api/product/insertitem";

  // API GET/PUT
  const { fetchById, putData, loading: loadingMaterial, error: errorMaterial } =
    useApi<Product>(productPath);

  // API GET Dropdowns
  const { fetchData: fetchProcessGroups, data: processGroups, loading: loadingProcessGroup, error: errorProcessGroup } =
    useApi<ProcessGroup>(processGroupPath);
  const { fetchData: fetchHardness, data: hardness, loading: loadingHardness, error: errorHardness } =
    useApi<ProductProperty>(hardnessPath);
  const { fetchData: fetchStoneClampRatios, data: stoneClampRatios, loading: loadingStoneClamp, error: errorStoneClamp } =
    useApi<ProductProperty>(stoneClampRatioPath);
  const { fetchData: fetchInsertItems, data: insertItems, loading: loadingInsertItem, error: errorInsertItem } =
    useApi<ProductProperty>(insertItemPath);

  // 4. ====== State ======
  const [currentProduct, setCurrentProduct] = useState<Product | null>(null);
  // State cho 4 dropdowns
  const [selectedProcessGroup, setSelectedProcessGroup] = useState<string>("");
  const [selectedHardness, setSelectedHardness] = useState<string>("");
  const [selectedStoneClamp, setSelectedStoneClamp] = useState<string>("");
  const [selectedInsertItem, setSelectedInsertItem] = useState<string>("");
  // State cho text inputs
  const [formData, setFormData] = useState({
    code: "",
    name: "",
  });

  // 5. ====== Load material by ID ======
  useEffect(() => {
    const loadData = async () => {
      if (!id) return;
      const res = await fetchById(id);
      if (res) setCurrentProduct(res as Product);
    };
    loadData();
  }, [id, fetchById]);

  // 6. ====== Load dropdowns ======
  useEffect(() => {
    fetchProcessGroups();
    fetchHardness();
    fetchStoneClampRatios();
    fetchInsertItems();
  }, [fetchProcessGroups, fetchHardness, fetchStoneClampRatios, fetchInsertItems]);

  // 7. ====== Sync data to form (QUAN TR·ªåNG) ======
  useEffect(() => {
    if (currentProduct) {
      // Sync text inputs
      setFormData({
        code: currentProduct.code,
        name: currentProduct.name,
      });
      // Sync dropdowns
      setSelectedProcessGroup(currentProduct.processGroupId || "");
      setSelectedHardness(currentProduct.hardnessId || "");
      setSelectedStoneClamp(currentProduct.stoneClampRatioId || "");
      setSelectedInsertItem(currentProduct.insertItemId || "");
    }
  }, [currentProduct]); // Ph·ª• thu·ªôc v√†o currentProduct

  // 8. Map data API sang ƒë·ªãnh d·∫°ng DropdownOption
  const processGroupOptions: DropdownOption[] =
    processGroups?.map((g) => ({ value: g.id, label: g.code })) || [];
  const hardnessOptions: DropdownOption[] =
    hardness?.map((h) => ({ value: h.id, label: h.value })) || [];
  const stoneClampOptions: DropdownOption[] =
    stoneClampRatios?.map((s) => ({ value: s.id, label: s.value })) || [];
  const insertItemOptions: DropdownOption[] =
    insertItems?.map((i) => ({ value: i.id, label: i.value })) || [];

  // 9. ====== PUT submit ======
  const handleSubmit = async (data: Record<string, string>) => {
    if (!id) return alert("‚ùå Thi·∫øu ID ƒë·ªÉ c·∫≠p nh·∫≠t!");

    const code = data["M√£ s·∫£n ph·∫©m"]?.trim();
    const name = data["T√™n s·∫£n ph·∫©m"]?.trim();

    // Validation
    if (!selectedProcessGroup) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn Nh√≥m c√¥ng ƒëo·∫°n s·∫£n xu·∫•t!");
    if (!code) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p M√£ s·∫£n ph·∫©m!");
    if (!name) return alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p T√™n s·∫£n ph·∫©m!");
    if (!selectedHardness) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn ƒê·ªô ki√™n c·ªë than ƒë√°!");
    if (!selectedStoneClamp) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn T·ª∑ l·ªá ƒë√° k·∫πp!");
    if (!selectedInsertItem) return alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn Ch√®n!");

    // T·∫°o payload (gi·ªëng h·ªát payload c·ªßa Input, nh∆∞ng th√™m ID)
    const payload = {
      id,
      code,
      name,
      processGroupId: selectedProcessGroup,
      hardnessId: selectedHardness,
      stoneClampRatioId: selectedStoneClamp,
      insertItemId: selectedInsertItem,
    };

    console.log("üì§ PUT payload:", payload);

    // G·ª≠i d·ªØ li·ªáu
    await putData(payload, () => {
      console.log("‚úÖ C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!");
      onSuccess?.();
      onClose?.();
    });
  };

  // 10. ====== Fields (D√πng custom placeholders) ======
  const fields = [
    { type: "custom1" as const }, // Placeholder cho Nh√≥m CƒêSX
    { label: "M√£ s·∫£n ph·∫©m", type: "text" as const, placeholder: "Nh·∫≠p m√£ s·∫£n ph·∫©m, v√≠ d·ª•: SP01" },
    { label: "T√™n s·∫£n ph·∫©m", type: "text" as const, placeholder: "Nh·∫≠p t√™n s·∫£n ph·∫©m, v√≠ d·ª•: L√≤ ch·ª£ 11-1.26 l√≤ ch·ªëng..." },
  ];

  // 11. T√≠nh to√°n tr·∫°ng th√°i loading/error t·ªïng
  const isLoading = loadingMaterial || loadingProcessGroup || loadingHardness || loadingStoneClamp || loadingInsertItem;
  const anyError = errorMaterial || errorProcessGroup || errorHardness || errorStoneClamp || errorInsertItem;

  return (
      <LayoutInput
        title01="Danh m·ª•c / S·∫£n ph·∫©m"
        title="Ch·ªânh s·ª≠a S·∫£n ph·∫©m"
        fields={fields}
        onSubmit={handleSubmit}
        closePath={PATHS.PRODUCTS.LIST}
        onClose={onClose}
        initialData={{
          "M√£ s·∫£n ph·∫©m": formData.code,
          "T√™n s·∫£n ph·∫©m": formData.name,
        }}
        // QUAN TR·ªåNG: C·∫ßn c·ªù n√†y ƒë·ªÉ c·∫≠p nh·∫≠t form khi data async v·ªÅ
        shouldSyncInitialData={true}
      >
        {/* Render c√°c dropdown t√πy ch·ªânh */}
        <div className="custom1" key={1}>
          <DropdownMenuSearchable
            label="Nh√≥m c√¥ng ƒëo·∫°n s·∫£n xu·∫•t"
            options={processGroupOptions}
            value={selectedProcessGroup}
            onChange={setSelectedProcessGroup}
            placeholder="Ch·ªçn m√£ nh√≥m c√¥ng ƒëo·∫°n s·∫£n xu·∫•t"
            isDisabled={loadingProcessGroup}
          />
        </div>
      </LayoutInput>


  );
};

export default ProductsEdit;