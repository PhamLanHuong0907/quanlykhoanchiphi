import React, { useState, useMemo } from "react";
import { X } from "lucide-react";
import { useNavigate } from "react-router-dom";
import Select from "react-select"; // Import react-select
import { useApi } from "../../hooks/useFetchData"; // Import hook API
import PATHS from "../../hooks/path"; // Import PATHS
import "../../layout/layout_input.css";
import "../../components/transactionselector.css"; // Import CSS cho react-select

// === ƒê·ªãnh nghƒ©a interface cho d·ªØ li·ªáu ===

// Interface cho API GET /api/catalog/equipment (CH·ªà L·∫§Y DANH S√ÅCH)
interface EquipmentListItem {
  id: string;
  code: string;
}

// Interface cho m·∫£ng costs l·ªìng nhau
interface EquipmentCost {
  startDate: string;
  endDate: string;
  costType: number;
  amount: number;
}

// Interface cho API GET /api/catalog/equipment/{id} (D·ªÆ LI·ªÜU CHI TI·∫æT)
interface EquipmentDetail {
  id: string;
  code: string;
  name: string;
  unitOfMeasureId: string;
  unitOfMeasureName: string;
  costs: EquipmentCost[];
}

// D·ªØ li·ªáu cho m·ªói h√†ng THI·∫æT B·ªä hi·ªÉn th·ªã tr√™n UI
interface EquipmentRowData {
  equipmentId: string;
  tenThietbi: string;
  donViTinh: string;
  dongiadiennang: number;
  monthlyElectricityCost: string;
  averageMonthlyTunnelProduction: string;
  dinhmucdiennang: string;
  chiphidiennang: string;
}

// Interface cho payload ch√≠nh g·ª≠i ƒëi
interface PostPayload {
  equipmentId: string;
  monthlyElectricityCost: number;
  averageMonthlyTunnelProduction: number;
}
// === K·∫æT TH√öC THAY ƒê·ªîI ===

export default function ElectricRailsInput({ onClose }: { onClose?: () => void }) {
  const navigate = useNavigate();
  const closePath = PATHS.ELECTRIC_RAILS.LIST;

  // === G·ªçi API ===
  // 1. API GET cho dropdown (T·ª± ƒë·ªông ch·∫°y khi mount)
  const { data: equipmentListData = [] } = useApi<EquipmentListItem>(
    "/api/catalog/equipment"
  );

  // 2. API POST (D√πng ƒë·ªÉ submit)
  const { postData, loading: isSubmitting } = useApi<PostPayload>(
    "/api/pricing/electricityunitpriceequipment"
  );

  // 3. API GET BY ID (D√πng ƒë·ªÉ l·∫•y chi ti·∫øt khi ch·ªçn)
  // *** S·ª¨A L·ªñI: D√πng h√†m fetchById v√† loading t·ª´ hook ***
  const { fetchById: getEquipmentDetail, loading: isLoadingRows } =
    useApi<EquipmentDetail>("/api/catalog/equipment"); // Base path

  // === State ===
  const [selectedEquipmentIds, setSelectedEquipmentIds] = useState<string[]>([]);
  const [equipmentRows, setEquipmentRows] = useState<EquipmentRowData[]>([]);
  // Kh√¥ng c·∫ßn state loading th·ªß c√¥ng n·ªØa
  // const [isLoadingRows, setIsLoadingRows] = useState(false); 

  // === Memoized Options cho Dropdown ===
  const equipmentOptions = useMemo(() => {
    return equipmentListData.map((eq) => ({
      value: eq.id,
      label: eq.code,
    }));
  }, [equipmentListData]);

  // === X·ª≠ l√Ω s·ª± ki·ªán ===

  const handleClose = () => {
    onClose?.();
    if (!onClose && closePath) navigate(closePath);
  };

  // KHI NG∆Ø·ªúI D√ôNG THAY ƒê·ªîI L·ª∞A CH·ªåN TRONG DROPDOWN
  const handleSelectChange = async (selected: any) => {
    // Kh√¥ng c·∫ßn set loading th·ªß c√¥ng
    const newSelectedIds = selected ? selected.map((s: any) => s.value) : [];
    setSelectedEquipmentIds(newSelectedIds);

    if (newSelectedIds.length === 0) {
      setEquipmentRows([]);
      return;
    }

    try {
      // *** S·ª¨A L·ªñI: G·ªçi h√†m 'getEquipmentDetail' (ch√≠nh l√† 'fetchById') ***
      const detailPromises = newSelectedIds.map((id: string) =>
        getEquipmentDetail(id) // G·ªçi h√†m t·ª´ hook
      );

      const detailedEquipments = await Promise.all(detailPromises);
      
      // L·ªçc ra c√°c k·∫øt qu·∫£ kh√¥ng null (v√¨ fetchById c√≥ th·ªÉ tr·∫£ v·ªÅ null)
      const validEquipments = detailedEquipments.filter(
        (eq): eq is EquipmentDetail => eq !== null
      );

      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu chi ti·∫øt th√†nh d·ªØ li·ªáu h√†ng
      const newRows = validEquipments.map(
        (eq): EquipmentRowData => {
          const electricCostObj = eq.costs
            ? eq.costs.find((c) => c.costType === 2)
            : null;
          const donGia = electricCostObj ? electricCostObj.amount : 0;

          return {
            equipmentId: eq.id,
            tenThietbi: eq.name || "N/A",
            donViTinh: eq.unitOfMeasureName || "N/A",
            dongiadiennang: donGia,
            monthlyElectricityCost: "",
            averageMonthlyTunnelProduction: "",
            dinhmucdiennang: "0",
            chiphidiennang: "0",
          };
        }
      );

      setEquipmentRows(newRows);
    } catch (error) {
      console.error("L·ªói khi t·∫£i chi ti·∫øt thi·∫øt b·ªã:", error);
      setEquipmentRows([]);
    } 
    // Kh√¥ng c·∫ßn finally ƒë·ªÉ set loading
  };

  // Khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu v√†o m·ªôt h√†ng
  const handleRowChange = (
    index: number,
    field: keyof EquipmentRowData,
    value: string
  ) => {
    const newRows = [...equipmentRows];
    const updatedRow = { ...newRows[index], [field]: value };

    // Logic t√≠nh to√°n
    const donGia = updatedRow.dongiadiennang || 0;
    const dienNangTieuThu = parseFloat(updatedRow.monthlyElectricityCost) || 0;
    const sanLuong = parseFloat(updatedRow.averageMonthlyTunnelProduction) || 0;

    let dinhMuc = 0;
    if (sanLuong !== 0) dinhMuc = dienNangTieuThu / sanLuong;
    const chiPhi = dinhMuc * donGia;

    updatedRow.dinhmucdiennang = dinhMuc.toLocaleString("vi-VN", {
      maximumFractionDigits: 2,
    });
    updatedRow.chiphidiennang = chiPhi.toLocaleString("vi-VN", {
      maximumFractionDigits: 2,
    });

    newRows[index] = updatedRow;
    setEquipmentRows(newRows);
  };

  // Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X√°c nh·∫≠n" (G·ª≠i nhi·ªÅu request POST)
  const handleSubmit = async () => {
    const submitPromises = equipmentRows.map((row) => {
      const payload: PostPayload = {
        equipmentId: row.equipmentId,
        monthlyElectricityCost: parseFloat(row.monthlyElectricityCost) || 0,
        averageMonthlyTunnelProduction:
          parseFloat(row.averageMonthlyTunnelProduction) || 0,
      };
      return postData(payload); // H√†m postData t·ª´ hook
    });

    try {
      await Promise.all(submitPromises);
      console.log("üì§ ƒê√£ g·ª≠i th√†nh c√¥ng T·∫§T C·∫¢ request");
      handleClose();
    } catch (error) {
      console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu (√≠t nh·∫•t 1 request th·∫•t b·∫°i):", error);
    }
  };

  // L·∫•y c√°c options ƒëang ƒë∆∞·ª£c ch·ªçn cho react-select
  const selectedOptions = equipmentOptions.filter((opt) =>
    selectedEquipmentIds.includes(opt.value)
  );

  return (
    <div
      className="layout-input-container"
      style={{ position: "relative", zIndex: 10000, height: "auto" }}
    >
      <button className="close-btn" onClick={handleClose} title="ƒê√≥ng">
        <X size={16} />
      </button>

      <div className="layout-input-header">
        <div className="header01">
          ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c / ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c ƒëi·ªán nƒÉng
        </div>
        <div className="line"></div>
        <div className="header02">T·∫°o m·ªõi ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c ƒëi·ªán nƒÉng</div>
      </div>

      <div className="layout-input-body">
        {/* Field M√£ thi·∫øt b·ªã (REACT-SELECT) */}
        <div className="input-row" style={{ position: "fixed" }}>
          <label>M√£ thi·∫øt b·ªã</label>
          <Select
            isMulti
            options={equipmentOptions}
            value={selectedOptions}
            onChange={handleSelectChange}
            className="transaction-select-wrapper"
            classNamePrefix="transaction-select"
            placeholder="Ch·ªçn M√£ thi·∫øt b·ªã"
            // *** S·ª¨A L·ªñI: D√πng state loading t·ª´ hook getById ***
            isDisabled={isLoadingRows} 
            styles={{
              menu: (provided) => ({ ...provided, zIndex: 9999 }),
            }}
          />
        </div>

        {/* ============================================== */}
        {/* HI·ªÇN TH·ªä C√ÅC H√ÄNG THI·∫æT B·ªä          */}
        {/* ============================================== */}
        <div
          style={{
            marginTop: "80px",
            width: "100%",
            maxHeight: "400px",
            overflowY: "auto",
            minHeight: "100px", 
          }}
        >
          {/* *** S·ª¨A L·ªñI: D√πng state loading t·ª´ hook getById *** */}
          {isLoadingRows && (
            <div style={{ textAlign: "center", padding: "20px" }}>
              ƒêang t·∫£i d·ªØ li·ªáu thi·∫øt b·ªã...
            </div>
          )}

          {!isLoadingRows &&
            equipmentRows.map((row, index) => (
              <div
                key={row.equipmentId}
                style={{
                  display: "flex",
                  gap: "16px",
                  width: "135%", 
                  flexWrap: "wrap",
                  marginBottom: "20px",
                  paddingBottom: "20px",
                  borderBottom: "1px dashed #ccc",
                }}
              >
                {/* === C√ÅC TR∆Ø·ªúNG READ-ONLY === */}
                {/* 1. T√™n thi·∫øt b·ªã */}
                <div
                  className="input-row"
                  style={{ width: "120px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`tenThietbi-${index}`}
                    style={{
                      display: "flex",
                      textAlign: "center",
                      height: "30px",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    T√™n thi·∫øt b·ªã
                  </label>
                  <input
                    type="text"
                    id={`tenThietbi-${index}`}
                    name="tenThietbi"
                    className="input-text"
                    value={row.tenThietbi}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>

                {/* 2. ƒê∆°n gi√° ƒëi·ªán nƒÉng */}
                <div
                  className="input-row"
                  style={{ width: "100px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`dongiadiennang-${index}`}
                    style={{
                      display: "flex",
                      textAlign: "center",
                      height: "30px",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    ƒê∆°n gi√° ƒëi·ªán nƒÉng
                  </label>
                  <input
                    type="text"
                    id={`dongiadiennang-${index}`}
                    name="dongiadiennang"
                    className="input-text"
                    value={row.dongiadiennang.toLocaleString("vi-VN")}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>

                {/* 3. ƒê∆°n v·ªã t√≠nh */}
                <div
                  className="input-row"
                  style={{ width: "80px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`donViTinh-${index}`}
                    style={{
                      display: "flex",
                      textAlign: "center",
                      height: "30px",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    ƒêVT
                  </label>
                  <input
                    id={`donViTinh-${index}`}
                    name="donViTinh"
                    className="input-text"
                    value={row.donViTinh}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>

                {/* === C√ÅC TR∆Ø·ªúNG EDITABLE === */}
                <div className="input-row" style={{ width: "120px" }}>
                  <label
                    htmlFor={`monthlyElectricityCost-${index}`}
                    style={{ textAlign: "center", height: "30px" }}
                  >
                    ƒêi·ªán nƒÉng ti√™u th·ª•/th√°ng
                  </label>
                  <input
                    type="number"
                    id={`monthlyElectricityCost-${index}`}
                    name="monthlyElectricityCost"
                    placeholder="Nh·∫≠p ƒëi·ªán nƒÉng"
                    className="input-text"
                    value={row.monthlyElectricityCost}
                    onChange={(e) =>
                      handleRowChange(
                        index,
                        "monthlyElectricityCost",
                        e.target.value
                      )
                    }
                    autoComplete="off"
                  />
                </div>

                <div className="input-row" style={{ width: "120px" }}>
                  <label
                    htmlFor={`averageMonthlyTunnelProduction-${index}`}
                    style={{ textAlign: "center", height: "30px" }}
                  >
                    S·∫£n l∆∞·ª£ng m√©t l√≤ BQ
                  </label>
                  <input
                    type="number"
                    id={`averageMonthlyTunnelProduction-${index}`}
                    name="averageMonthlyTunnelProduction"
                    placeholder="Nh·∫≠p s·∫£n l∆∞·ª£ng"
                    className="input-text"
                    value={row.averageMonthlyTunnelProduction}
                    onChange={(e) =>
                      handleRowChange(
                        index,
                        "averageMonthlyTunnelProduction",
                        e.target.value
                      )
                    }
                    autoComplete="off"
                  />
                </div>

                {/* === C√ÅC TR∆Ø·ªúNG T√çNH TO√ÅN === */}
                <div
                  className="input-row"
                  style={{ width: "100px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`dinhmucdiennang-${index}`}
                    style={{ textAlign: "center", height: "30px" }}
                  >
                    ƒê·ªãnh m·ª©c ƒëi·ªán nƒÉng
                  </label>
                  <input
                    type="text"
                    id={`dinhmucdiennang-${index}`}
                    name="dinhmucdiennang"
                    className="input-text"
                    value={row.dinhmucdiennang}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>
                <div
                  className="input-row"
                  style={{ width: "100px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`chiphidiennang-${index}`}
                    style={{ textAlign: "center", height: "30px" }}
                  >
                    Chi ph√≠ ƒëi·ªán nƒÉng
                  </label>
                  <input
                    type="text"
                    id={`chiphidiennang-${index}`}
                    name="chiphidiennang"
                    className="input-text"
                    value={row.chiphidiennang}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>
              </div>
            ))}

          {/* Hi·ªÉn th·ªã khi kh√¥ng c√≥ h√†ng n√†o v√† kh√¥ng loading */}
          {!isLoadingRows && equipmentRows.length === 0 && (
            <div
              style={{
                textAlign: "center",
                padding: "20px",
                color: "#888",
              }}
            >

            </div>
          )}
        </div>
      </div>
      {/* Footer */}
      <div className="layout-input-footer">
        <button className="btn-cancel" onClick={handleClose}>
          H·ªßy
        </button>
        <button
          className="btn-confirm"
          onClick={handleSubmit}
          // *** S·ª¨A L·ªñI: D√πng c·∫£ hai state loading ***
          disabled={isSubmitting || isLoadingRows} 
        >
          {isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
        </button>
      </div>
    </div>
  );
}