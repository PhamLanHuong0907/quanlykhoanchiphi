import React, { useState, useMemo, } from "react";
import { X} from "lucide-react";
import { useNavigate } from "react-router-dom";
import Select from "react-select"; // Import react-select
import { useApi } from "../../hooks/useFetchData"; // Import hook API
import PATHS from "../../hooks/path"; // Import PATHS
import "../../layout/layout_input.css";
import "../../components/transactionselector.css"; // Import CSS cho react-select

// === ƒê·ªãnh nghƒ©a interface cho d·ªØ li·ªáu ===

// D·ªØ li·ªáu t·ª´ API /api/catalog/equipment
interface Equipment {
  id: string;
  code: string;
  name: string;
  unitOfMeasureId: string;
  unitOfMeasureName: string;
}

// D·ªØ li·ªáu t·ª´ API /api/catalog/part
interface Part {
  id: string;
  code: string;
  name: string;
  unitOfMeasureId: string;
  unitOfMeasureName: string;
  equipmentId: string;
  equipmentCode: string;
  costAmmount: number; // ƒê√¢y c√≥ v·∫ª l√† "ƒê∆°n gi√° v·∫≠t t∆∞"
}

// D·ªØ li·ªáu cho m·ªói h√†ng ph·ª• t√πng hi·ªÉn th·ªã tr√™n UI
interface PartRowData {
  // D·ªØ li·ªáu g·ªëc t·ª´ API
  partId: string;
  equipmentId: string;
  tenPhuTung: string;
  donGiaVatTu: number;
  donViTinh: string;
  // D·ªØ li·ªáu ng∆∞·ªùi d√πng nh·∫≠p
  dinhMucThoiGian: string;
  soLuongVatTu: string;
  sanLuongMetLo: string;
  // D·ªØ li·ªáu t√≠nh to√°n
  dinhMucVatTuSCTX: string;
  chiPhiVatTuSCTX: string;
}

// === THAY ƒê·ªîI: C·∫¨P NH·∫¨T C·∫§U TR√öC PAYLOAD M·ªöI ===
// Interface cho t·ª´ng item trong m·∫£ng 'costs'
interface CostItem {
  equipmentId: string;
  partId: string;
  quantity: number;
  replacementTimeStandard: number;
  averageMonthlyTunnelProduction: number;
}

// Interface cho payload ch√≠nh g·ª≠i ƒëi
interface PostPayload {
  costs: CostItem[];
}
// === K·∫æT TH√öC THAY ƒê·ªîI ===

export default function SlideRailsInput({ onClose }: { onClose?: () => void }) {
  const navigate = useNavigate();
  const closePath = PATHS.SLIDE_RAILS.LIST;

  // === G·ªçi API ===
  // 1. API GET cho dropdown M√£ thi·∫øt b·ªã
  const { data: equipmentData = [] } = useApi<Equipment>(
    "/api/catalog/equipment"
  );
  // 2. API GET cho t·∫•t c·∫£ ph·ª• t√πng
  const { data: allPartsData = [] } = useApi<Part>("/api/catalog/part");

  // === THAY ƒê·ªîI: C·∫¨P NH·∫¨T API POST V√Ä BASEPATH ===
  const { postData, loading: isSubmitting } = useApi<PostPayload>(
    "/api/pricing/maintainunitpriceequipment" // C·∫≠p nh·∫≠t basePath
  );
  // === K·∫æT TH√öC THAY ƒê·ªîI ===

  // === State ===
  // L∆∞u ID c·ªßa c√°c thi·∫øt b·ªã ƒë∆∞·ª£c ch·ªçn
  const [selectedEquipmentIds, setSelectedEquipmentIds] = useState<string[]>([]);
  // L∆∞u d·ªØ li·ªáu c·ªßa c√°c h√†ng ph·ª• t√πng ƒëang hi·ªÉn th·ªã
  const [partRows, setPartRows] = useState<PartRowData[]>([]);

  // === Memoized Options cho Dropdown ===
  // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu equipment th√¥ sang ƒë·ªãnh d·∫°ng { value, label }
  const equipmentOptions = useMemo(() => {
    return equipmentData.map((eq) => ({
      value: eq.id,
      label: eq.code, // Hi·ªÉn th·ªã 'code' trong dropdown
    }));
  }, [equipmentData]);

  // === X·ª≠ l√Ω s·ª± ki·ªán ===

  // ƒê√≥ng form
  const handleClose = () => {
    onClose?.();
    if (!onClose && closePath) navigate(closePath);
  };

  // Khi ng∆∞·ªùi d√πng thay ƒë·ªïi l·ª±a ch·ªçn trong dropdown M√£ thi·∫øt b·ªã
  const handleSelectChange = (selected: any) => {
    const newSelectedIds = selected ? selected.map((s: any) => s.value) : [];
    setSelectedEquipmentIds(newSelectedIds);

    // L·ªçc ra c√°c ph·ª• t√πng t∆∞∆°ng ·ª©ng v·ªõi c√°c thi·∫øt b·ªã ƒë√£ ch·ªçn
    const newRows = allPartsData
      .filter((part) => newSelectedIds.includes(part.equipmentId))
      .map(
        (part): PartRowData => ({
          partId: part.id,
          equipmentId: part.equipmentId,
          tenPhuTung: part.name,
          donGiaVatTu: part.costAmmount || 0,
          donViTinh: part.unitOfMeasureName || "C√°i",
          dinhMucThoiGian: "", // Reset c√°c tr∆∞·ªùng input
          soLuongVatTu: "",
          sanLuongMetLo: "",
          dinhMucVatTuSCTX: "0",
          chiPhiVatTuSCTX: "0",
        })
      );
    setPartRows(newRows);
  };

  // Khi ng∆∞·ªùi d√πng nh·∫≠p li·ªáu v√†o m·ªôt h√†ng
  const handleRowChange = (
    index: number,
    field: keyof PartRowData,
    value: string
  ) => {
    // T·∫°o b·∫£n sao c·ªßa m·∫£ng rows
    const newRows = [...partRows];
    // C·∫≠p nh·∫≠t gi√° tr·ªã cho h√†ng c·ª• th·ªÉ
    const updatedRow = { ...newRows[index], [field]: value };

    // === Logic t√≠nh to√°n (gi·ªØ nguy√™n) ===
    const donGia = updatedRow.donGiaVatTu || 0;
    const dinhMucThoiGian = parseFloat(updatedRow.dinhMucThoiGian) || 0;
    const soLuongVatTu = parseFloat(updatedRow.soLuongVatTu) || 0;
    const sanLuongMetLo = parseFloat(updatedRow.sanLuongMetLo) || 0;

    let dinhMucVatTu = 0;
    if (sanLuongMetLo !== 0)
      dinhMucVatTu = (dinhMucThoiGian * soLuongVatTu) / sanLuongMetLo;
    const chiPhiVatTu = dinhMucVatTu * donGia;

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng t√≠nh to√°n
    updatedRow.dinhMucVatTuSCTX = dinhMucVatTu.toLocaleString("vi-VN", {
      maximumFractionDigits: 2,
    });
    updatedRow.chiPhiVatTuSCTX = chiPhiVatTu.toLocaleString("vi-VN", {
      maximumFractionDigits: 2,
    });

    // C·∫≠p nh·∫≠t l·∫°i h√†ng ƒë√≥ trong m·∫£ng
    newRows[index] = updatedRow;
    // C·∫≠p nh·∫≠t state
    setPartRows(newRows);
  };

  // === THAY ƒê·ªîI: C·∫¨P NH·∫¨T LOGIC SUBMIT THEO JSON M·ªöI ===
  // Khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "X√°c nh·∫≠n"
  const handleSubmit = async () => {
    // Chuy·ªÉn ƒë·ªïi T·∫§T C·∫¢ c√°c h√†ng (partRows) sang ƒë·ªãnh d·∫°ng CostItem m√† API y√™u c·∫ßu
    // API y√™u c·∫ßu number, state ƒëang l∆∞u string, n√™n c·∫ßn parseFloat
    const costItems: CostItem[] = partRows.map((row) => ({
      equipmentId: row.equipmentId,
      partId: row.partId,
      quantity: parseFloat(row.soLuongVatTu) || 0,
      replacementTimeStandard: parseFloat(row.dinhMucThoiGian) || 0,
      averageMonthlyTunnelProduction: parseFloat(row.sanLuongMetLo) || 0,
    }));

    // T·∫°o payload cu·ªëi c√πng
    const payload: PostPayload = {
      costs: costItems,
    };

    // G·ª≠i M·ªòT request duy nh·∫•t ch·ª©a to√†n b·ªô m·∫£ng
    try {
      await postData(payload, () => {
        console.log("üì§ ƒê√£ g·ª≠i th√†nh c√¥ng:", payload);
        handleClose(); // ƒê√≥ng form sau khi th√†nh c√¥ng
      });
    } catch (error) {
      console.error("L·ªói khi g·ª≠i d·ªØ li·ªáu:", error);
      // B·∫°n c√≥ th·ªÉ th√™m state ƒë·ªÉ hi·ªÉn th·ªã l·ªói cho ng∆∞·ªùi d√πng
    }
  };
  // === K·∫æT TH√öC THAY ƒê·ªîI ===

  // L·∫•y c√°c options ƒëang ƒë∆∞·ª£c ch·ªçn cho react-select
  const selectedOptions = equipmentOptions.filter((opt) =>
    selectedEquipmentIds.includes(opt.value)
  );

  return (
    <div
      className="layout-input-container"
      style={{ position: "relative", zIndex: 10000, height: "auto" }}
    >
      <button className="close-btn" onClick={handleClose} title="ƒê√≥ng">
        <X size={16} />
      </button>

      <div className="layout-input-header">
        <div className="header01">
          ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c / ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c SCTX
        </div>
        <div className="line"></div>
        <div className="header02">T·∫°o m·ªõi ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c SCTX</div>
      </div>

      <div className="layout-input-body">
        {/* Field M√£ thi·∫øt b·ªã (REACT-SELECT) */}
        <div className="input-row" style={{ position: "fixed" }}>
          <label>M√£ thi·∫øt b·ªã</label>
          <Select
            isMulti
            options={equipmentOptions}
            value={selectedOptions}
            onChange={handleSelectChange}
            className="transaction-select-wrapper" // D√πng class t·ª´ file CSS
            classNamePrefix="transaction-select" // D√πng class t·ª´ file CSS
            placeholder="Ch·ªçn M√£ thi·∫øt b·ªã"
            styles={{
              // ƒê·∫£m b·∫£o dropdown menu hi·ªÉn th·ªã b√™n tr√™n c√°c ph·∫ßn t·ª≠ kh√°c
              menu: (provided) => ({ ...provided, zIndex: 9999 }),
            }}
          />
        </div>

        {/* ============================================== */}
        {/* HI·ªÇN TH·ªä C√ÅC H√ÄNG PH·ª§ T√ôNG          */}
        {/* ============================================== */}
        {/* Th√™m 1 div wrapper ƒë·ªÉ cu·ªôn n·∫øu c√≥ qu√° nhi·ªÅu h√†ng */}
        <div
          style={{
            marginTop: "80px",
            width: "100%",
            maxHeight: "400px", // Gi·ªõi h·∫°n chi·ªÅu cao
            overflowY: "auto", // Th√™m thanh cu·ªôn
          }}
        >
          {partRows.map((row, index) => (
            // M·ªói ph·ª• t√πng l√† m·ªôt nh√≥m c√°c tr∆∞·ªùng input
            <div
              key={row.partId} // D√πng partId l√†m key
              style={{
                display: "flex",
                gap: "16px",
                width: "135%",
                flexWrap: "wrap",
                marginBottom: "20px",
                paddingBottom: "20px",
                borderBottom: "1px dashed #ccc",
              }}
            >
              {[
                { label: "T√™n ph·ª• t√πng", name: "tenPhuTung" },
                { label: "ƒê∆°n gi√° v·∫≠t t∆∞", name: "donGiaVatTu" },
              ].map((item) => (
                <div
                  key={item.name}
                  className="input-row"
                  style={{ width: "100px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`${item.name}-${index}`}
                    style={{
                      display: "flex",
                      textAlign: "center",
                      height: "30px",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    {item.label}
                  </label>
                  <input
                    type="text"
                    id={`${item.name}-${index}`}
                    name={item.name}
                    className="input-text"
                    value={(row as any)[item.name]}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>
              ))}
              {[
                { label: "ƒêVT", name: "donViTinh" },
              ].map((item) => (
                <div
                  key={item.name}
                  className="input-row"
                  style={{ width: "80px", marginBottom: "21px" }}
                >
                  <label
                    htmlFor={`${item.name}-${index}`}
                    style={{
                      display: "flex",
                      textAlign: "center",
                      height: "30px",
                      alignItems: "center",
                      justifyContent: "center",
                    }}
                  >
                    {item.label}
                  </label>
                  <input
                    type="text"
                    id={`${item.name}-${index}`}
                    name={item.name}
                    className="input-text"
                    value={(row as any)[item.name]}
                    readOnly
                    style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                  />
                </div>
              ))}
              {/* Input c√°c tr∆∞·ªùng c√≤n l·∫°i */}
              <div className="input-row" style={{ width: "120px" }}>
                <label
                  htmlFor={`dinhMucThoiGian-${index}`}
                  style={{ textAlign: "center", height: "30px" }}
                >
                  ƒê·ªãnh m·ª©c th·ªùi gian thay th·∫ø
                </label>
                <input
                  type="number"
                  id={`dinhMucThoiGian-${index}`}
                  name="dinhMucThoiGian"
                  placeholder="Nh·∫≠p ƒë·ªãnh m·ª©c"
                  className="input-text"
                  value={row.dinhMucThoiGian}
                  onChange={(e) =>
                    handleRowChange(index, "dinhMucThoiGian", e.target.value)
                  }
                  autoComplete="off"
                />
              </div>

              <div className="input-row" style={{ width: "120px" }}>
                <label
                  htmlFor={`soLuongVatTu-${index}`}
                  style={{ textAlign: "center", height: "30px" }}
                >
                  S·ªë l∆∞·ª£ng v·∫≠t t∆∞ thay th·∫ø
                </label>
                <input
                  type="number"
                  id={`soLuongVatTu-${index}`}
                  name="soLuongVatTu"
                  placeholder="Nh·∫≠p s·ªë l∆∞·ª£ng"
                  className="input-text"
                  value={row.soLuongVatTu}
                  onChange={(e) =>
                    handleRowChange(index, "soLuongVatTu", e.target.value)
                  }
                  autoComplete="off"
                />
              </div>

              <div className="input-row" style={{ width: "120px" }}>
                <label
                  htmlFor={`sanLuongMetLo-${index}`}
                  style={{ textAlign: "center", height: "30px" }}
                >
                  S·∫£n l∆∞·ª£ng m√©t l√≤ ƒë√†o b√¨nh qu√¢n
                </label>
                <input
                  type="number"
                  id={`sanLuongMetLo-${index}`}
                  name="sanLuongMetLo"
                  placeholder="Nh·∫≠p s·∫£n l∆∞·ª£ng"
                  className="input-text"
                  value={row.sanLuongMetLo}
                  onChange={(e) =>
                    handleRowChange(index, "sanLuongMetLo", e.target.value)
                  }
                  autoComplete="off"
                />
              </div>

              {/* 2 c·ªôt k·∫øt qu·∫£ t√≠nh to√°n */}
              <div
                className="input-row"
                style={{ width: "100px", marginBottom: "21px" }}
              >
                <label
                  htmlFor={`dinhMucVatTuSCTX-${index}`}
                  style={{ textAlign: "center", height: "30px" }}
                >
                  ƒê·ªãnh m·ª©c v·∫≠t t∆∞ SCTX
                </label>
                <input
                  type="text"
                  id={`dinhMucVatTuSCTX-${index}`}
                  name="dinhMucVatTuSCTX"
                  className="input-text"
                  value={row.dinhMucVatTuSCTX}
                  readOnly
                  style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                />
              </div>
              <div
                className="input-row"
                style={{ width: "100px", marginBottom: "21px" }}
              >
                <label
                  htmlFor={`chiPhiVatTuSCTX-${index}`}
                  style={{ textAlign: "center", height: "30px" }}
                >
                  Chi ph√≠ v·∫≠t t∆∞ SCTX
                </label>
                <input
                  type="text"
                  id={`chiPhiVatTuSCTX-${index}`}
                  name="chiPhiVatTuSCTX"
                  className="input-text"
                  value={row.chiPhiVatTuSCTX}
                  readOnly
                  style={{ width: "100%", backgroundColor: "#f1f2f5" }}
                />
              </div>
            </div>
          ))}
        </div>
      </div>
      {/* Footer */}
      <div className="layout-input-footer">
        <button className="btn-cancel" onClick={handleClose}>
          H·ªßy
        </button>
        <button
          className="btn-confirm"
          onClick={handleSubmit}
          disabled={isSubmitting} // V√¥ hi·ªáu h√≥a n√∫t khi ƒëang g·ª≠i
        >
          {isSubmitting ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n"}
        </button>
      </div>
    </div>
  );
}