import React, { useEffect, useState, useMemo } from "react"; // Th√™m useState, useMemo
import Layout from "../../layout/layout_filter";
import AdvancedTable from "../../components/bodytable";
import EyeToggle from "../../components/eye";
import Materials_Ingredient_Input from "./Materials_Ingredient_Input";
import Materials_Ingredient_Grouped from "../../layout/test";
import { useApi } from "../../hooks/useFetchData";
import { ChevronsUpDown } from "lucide-react";
import PencilButton from "../../components/PencilButtons";
import Materials_Ingredient_Edit from "./Materials_Ingredient_Edit";

// 1. ƒê·ªãnh nghƒ©a Interface (Gi·ªØ nguy√™n)
interface MaterialUnitPrice {
  id: string;
  code: string;
  processGroupId: string;
  processId: string;
  passportId: string;
  hardnessId: string;
  insertItemId: string;
  supportStepId: string;
  processName: string;
  totalPrice: number;
}

// Hook debounce (t√πy ch·ªçn nh∆∞ng r·∫•t n√™n d√πng cho search)
const useDebounce = (value: string, delay: number) => {
  const [debouncedValue, setDebouncedValue] = useState(value);
  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);
    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);
  return debouncedValue;
};

// √Ånh x·∫° index c·ªôt sang t√™n API (R·∫•t quan tr·ªçng cho S·∫Øp x·∫øp)
// Ph·∫£i kh·ªõp v·ªõi 'columns'
const COLUMN_API_MAP = [
  "stt", // 0 (kh√¥ng s·∫Øp x·∫øp)
  "processName", // 1
  "code",          // 2
  "totalPrice",    // 3
  "xem", // 4 (kh√¥ng s·∫Øp x·∫øp)
  "sua", // 5 (kh√¥ng s·∫Øp x·∫øp)
];

const Materials_Ingredient: React.FC = () => {
  // 1. STATE QU·∫¢N L√ù (pagination, search, sort)
  const [pageIndex, setPageIndex] = useState(1);
  const [pageSize, setPageSize] = useState(10); // M·∫∑c ƒë·ªãnh 10
  const [sortConfig, setSortConfig] = useState<{
    key: number;
    direction: "asc" | "desc";
  } | null>(null);
  const [searchValue, setSearchValue] = useState("");
  const debouncedSearchValue = useDebounce(searchValue, 300); // Tr√¨ ho√£n 300ms

  // 2. X√¢y d·ª±ng API Path ƒë·ªông
  const basePath = `api/pricing/materialunitprice`;

  const apiPath = useMemo(() => {
    const params = new URLSearchParams();
    params.append("pageIndex=", pageIndex.toString());
    params.append("&pageSize=", pageSize.toString());

    // Th√™m search (n·∫øu c√≥)
    if (debouncedSearchValue) {
      params.append("search", debouncedSearchValue);
    }

    // Th√™m sort (n·∫øu c√≥)
    if (sortConfig) {
      const apiKey = COLUMN_API_MAP[sortConfig.key];
      if (apiKey && apiKey !== "stt" && apiKey !== "xem" && apiKey !== "sua") {
        params.append("sortBy", apiKey);
        params.append("sortDir", sortConfig.direction);
      }
    }

    return `${basePath}?${params.toString()}`;
  }, [pageIndex, pageSize, debouncedSearchValue, sortConfig]);

  // 3. G·ªçi API
  // Hook useApi s·∫Ω t·ª± ƒë·ªông fetch l·∫°i khi 'apiPath' thay ƒë·ªïi
  const { data, totalCount, fetchData, loading, error } =
    useApi<MaterialUnitPrice>(apiPath);

  // 4. H√†m refresh
  const refresh = () => fetchData();

  // 5. C·∫≠p nh·∫≠t Columns (Gi·ªØ nguy√™n)
  const columns = [
    "STT",
    <div className="flex items-center gap-1" key="processName">
      <span>C√¥ng ƒëo·∫°n s·∫£n xu·∫•t</span>
      <ChevronsUpDown size={13} className="text-gray-100 text-xs" />
    </div>,
    <div className="flex items-center gap-1" key="name">
      <span>M√£ ƒë·ªãnh m·ª©c v·∫≠t li·ªáu</span>
      <ChevronsUpDown size={13} className="text-gray-100 text-xs" />
    </div>,
    <div className="flex items-center gap-1" key="total">
      <span>T·ªïng ti·ªÅn</span>
      <ChevronsUpDown size={13} className="text-gray-100 text-xs" />
    </div>,
    "Xem",
    "S·ª≠a",
  ];

  const columnWidths = [6.3, 18.6, 57.5, 10.2, 3, 4];

  // 6. Map d·ªØ li·ªáu t·ª´ API (B·ªçc trong useMemo)
  const tableData = useMemo(() => {
    return (
      data?.map((row, index) => {
        // T√≠nh STT ch√≠nh x√°c
        const sequentialIndex = (pageIndex - 1) * pageSize + index + 1;
        return [
          sequentialIndex,
          row.processName,
          row.code || "",
          row.totalPrice?.toLocaleString() || "0",
          <EyeToggle
            key={row.id}
            // üëà T·ªêI ∆ØU LAZY LOAD
            renderDetailComponent={() => (
              <Materials_Ingredient_Grouped id={row.id} />
            )}
          />,
          <PencilButton
            id={row.id}
            // üëà T·ªêI ∆ØU LAZY LOAD (Gi·∫£ s·ª≠ PencilButton h·ªó tr·ª£)
            editElement={<Materials_Ingredient_Edit onSuccess={refresh} />}
          />,
        ];
      }) || []
    );
  }, [data, pageIndex, pageSize]); // Ch·ªâ ch·∫°y l·∫°i khi data ho·∫∑c trang thay ƒë·ªïi

  // 7. Bi·∫øn loading/error
  // 'loading' t·ª´ hook useApi ƒë√£ bao g·ªìm c·∫£ l·∫ßn t·∫£i ƒë·∫ßu v√† c√°c l·∫ßn chuy·ªÉn trang
  const isLoading = loading;
  const anyError = error;

  return (
    <Layout>
      <div className="p-6">
        {/* ... (style c·ªßa b·∫°n gi·ªØ nguy√™n) ... */}
         <style>{`
          th > div {
            display: inline-flex;
            align-items: center;
            gap: 3px;
          }
          th > div span:last-child {
            font-size: 5px;
            color: gray;
          }
        `}</style>
        
        {/* 7. X·ª≠ l√Ω UI khi loading ho·∫∑c c√≥ l·ªói */}
        {anyError ? ( // ∆Øu ti√™n hi·ªÉn th·ªã l·ªói
          <div className="text-center text-red-500 py-10">
            L·ªói: {anyError.toString()}
          </div>
        ) : (
          <AdvancedTable
            title01="ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c / ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c v·∫≠t li·ªáu"
            title="ƒê∆°n gi√° v√† ƒë·ªãnh m·ª©c v·∫≠t li·ªáu"
            columns={columns}
            columnWidths={columnWidths}
            data={tableData} // D·ªØ li·ªáu c·ªßa trang n√†y (ch·ªâ 10 d√≤ng)
            createElement={<Materials_Ingredient_Input onSuccess={refresh} />}
            basePath={basePath} // basePath g·ªëc (ƒë·ªÉ X√≥a)
            onDeleted={refresh}
            columnLefts={['undefined','undefined','undefined','undefined','undefined']}
            
            // --- TRUY·ªÄN PROPS XU·ªêNG B·∫¢NG ---
            totalItems={totalCount}
            itemsPerPage={pageSize}
            currentPage={pageIndex}
            onPageChange={setPageIndex} // üëà Giao quy·ªÅn
            
            searchValue={searchValue}
            onSearchChange={setSearchValue} // üëà Giao quy·ªÅn
            
            sortConfig={sortConfig}
            onSortChange={setSortConfig} // üëà Giao quy·ªÅn
          />
        )}
        
        {/* Hi·ªÉn th·ªã loading ri√™ng, kh√¥ng l√†m ·∫©n b·∫£ng */}
        {isLoading && (
            <div style={{
                position: 'absolute', 
                top: '50%', 
                left: '50%', 
                transform: 'translate(-50%, -50%)',
                background: 'rgba(255, 255, 255, 0.7)',
                padding: '10px 20px',
                borderRadius: '8px',
                zIndex: 100
            }}>
            </div>
        )}
      </div>
    </Layout>
  );
};

export default Materials_Ingredient;